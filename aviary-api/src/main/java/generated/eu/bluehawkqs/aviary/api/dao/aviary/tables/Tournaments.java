/*
 * This file is generated by jOOQ.
*/
package eu.bluehawkqs.aviary.api.dao.aviary.tables;


import eu.bluehawkqs.aviary.api.dao.aviary.Aviary;
import eu.bluehawkqs.aviary.api.dao.aviary.Keys;
import eu.bluehawkqs.aviary.api.dao.aviary.tables.records.TournamentsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tournaments extends TableImpl<TournamentsRecord> {

    private static final long serialVersionUID = -175520263;

    /**
     * The reference instance of <code>aviary.tournaments</code>
     */
    public static final Tournaments TOURNAMENTS = new Tournaments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TournamentsRecord> getRecordType() {
        return TournamentsRecord.class;
    }

    /**
     * The column <code>aviary.tournaments.id</code>.
     */
    public final TableField<TournamentsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.name</code>.
     */
    public final TableField<TournamentsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.description</code>.
     */
    public final TableField<TournamentsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.location</code>.
     */
    public final TableField<TournamentsRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.start-date</code>.
     */
    public final TableField<TournamentsRecord, Timestamp> START_DATE = createField("start-date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.end-date</code>.
     */
    public final TableField<TournamentsRecord, Timestamp> END_DATE = createField("end-date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.registration-deadline</code>.
     */
    public final TableField<TournamentsRecord, Timestamp> REGISTRATION_DEADLINE = createField("registration-deadline", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>aviary.tournaments.size</code>.
     */
    public final TableField<TournamentsRecord, Integer> SIZE = createField("size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>aviary.tournaments</code> table reference
     */
    public Tournaments() {
        this("tournaments", null);
    }

    /**
     * Create an aliased <code>aviary.tournaments</code> table reference
     */
    public Tournaments(String alias) {
        this(alias, TOURNAMENTS);
    }

    private Tournaments(String alias, Table<TournamentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tournaments(String alias, Table<TournamentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aviary.AVIARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TournamentsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TOURNAMENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TournamentsRecord> getPrimaryKey() {
        return Keys.PK_TOURNAMENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TournamentsRecord>> getKeys() {
        return Arrays.<UniqueKey<TournamentsRecord>>asList(Keys.PK_TOURNAMENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tournaments as(String alias) {
        return new Tournaments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tournaments rename(String name) {
        return new Tournaments(name, null);
    }
}
